#!/usr/bin/env python3

import sqlite3
import bottle
import threading


def bootstrap(
    dbpath : 'path to where to store the sqlite db' = 'owners.db'):
    """ Create and setup the database """

    conn = sqlite3.connect(dbpath)
    c = conn.cursor()
    c.execute('''CREATE TABLE objects (
                    id text PRIMARY KEY,
                    owner text NOT NULL,
                    secret text NOT NULL)''')
    conn.commit()
    conn.close()


def serve(
    dbpath : 'path to where to store the sqlite db' = 'owners.db',
    port : 'server port' = 8889,
    secret : 'secret required as SECRET header' = None):
    """ Start up a server """

    lock = threading.Lock()

    def check_secret():
        if secret is None:
            return True
        challenge = bottle.request.headers.get('Secret')
        if secret != challenge:
            raise bottle.HTTPError(401)

    def acquire(id, owner):
        check_secret()
        owner_secret = bottle.request.headers.get('Owner-Secret') or None
        if owner_secret is None:
            raise bottle.HTTPError(400)
        with lock:
            conn = sqlite3.connect(dbpath)
            c = conn.cursor()
            c.execute('''SELECT id FROM objects
                WHERE id = ?
                AND owner = ?
                AND secret = ?''',
                (id, owner, owner_secret))
            if c.fetchone():
                return
            try:
                c.execute('INSERT INTO objects VALUES (?, ?, ?)', (id, owner, owner_secret))
                conn.commit()
            except sqlite3.IntegrityError:
                raise bottle.HTTPError(409)
            finally:
                conn.close()

    def release(id, owner):
        check_secret()
        owner_secret = bottle.request.headers.get('Owner-Secret') or None
        if owner_secret is None:
            raise bottle.HTTPError(400)
        with lock:
            conn = sqlite3.connect(dbpath)
            c = conn.cursor()
            c.execute('SELECT id FROM objects WHERE id = ?', (id, ))
            if not c.fetchone():
                return
            c.execute('''DELETE FROM objects
                WHERE id = ?
                AND owner = ?
                AND secret = ?''',
                (id, owner, owner_secret))
            conn.commit()
            if conn.total_changes == 0:
                raise bottle.HTTPError(401)
            conn.close()

    app = bottle.Bottle()
    app.route(path='/<id>/<owner>', method='POST', callback=acquire)
    app.route(path='/<id>/<owner>', method='DELETE', callback=release)
    app.run(host='0.0.0.0', port=port, server='cherrypy')


if __name__ == '__main__':
    import argh
    argh.dispatch_commands([bootstrap, serve])

